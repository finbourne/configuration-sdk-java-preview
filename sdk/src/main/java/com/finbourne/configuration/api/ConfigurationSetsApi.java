/*
 * FINBOURNE ConfigurationService API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.275
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.configuration.api;

import com.finbourne.configuration.ApiCallback;
import com.finbourne.configuration.ApiClient;
import com.finbourne.configuration.ApiException;
import com.finbourne.configuration.ApiResponse;
import com.finbourne.configuration.Configuration;
import com.finbourne.configuration.Pair;
import com.finbourne.configuration.ProgressRequestBody;
import com.finbourne.configuration.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.configuration.model.ConfigurationItem;
import com.finbourne.configuration.model.ConfigurationSet;
import com.finbourne.configuration.model.CreateConfigurationItem;
import com.finbourne.configuration.model.CreateConfigurationSet;
import com.finbourne.configuration.model.LusidProblemDetails;
import com.finbourne.configuration.model.LusidValidationProblemDetails;
import com.finbourne.configuration.model.PersonalAccessToken;
import com.finbourne.configuration.model.ResourceListOfConfigurationItem;
import com.finbourne.configuration.model.ResourceListOfConfigurationSet;
import com.finbourne.configuration.model.ResourceListOfConfigurationSetSummary;
import com.finbourne.configuration.model.UpdateConfigurationItem;
import com.finbourne.configuration.model.UpdateConfigurationSet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationSetsApi {
    private ApiClient localVarApiClient;
    public ConfigurationSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationSetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addConfigurationToSet
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param createConfigurationItem The data to create a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addConfigurationToSetCall(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createConfigurationItem;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}/items"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addConfigurationToSetValidateBeforeCall(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addConfigurationToSet(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling addConfigurationToSet(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling addConfigurationToSet(Async)");
        }
        
        // verify the required parameter 'createConfigurationItem' is set
        if (createConfigurationItem == null) {
            throw new ApiException("Missing the required parameter 'createConfigurationItem' when calling addConfigurationToSet(Async)");
        }
        

        okhttp3.Call localVarCall = addConfigurationToSetCall(type, scope, code, createConfigurationItem, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] AddConfigurationToSet: Add a configuration item to an existing set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param createConfigurationItem The data to create a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ConfigurationSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSet addConfigurationToSet(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId) throws ApiException {
        ApiResponse<ConfigurationSet> localVarResp = addConfigurationToSetWithHttpInfo(type, scope, code, createConfigurationItem, userId);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] AddConfigurationToSet: Add a configuration item to an existing set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param createConfigurationItem The data to create a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;ConfigurationSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSet> addConfigurationToSetWithHttpInfo(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId) throws ApiException {
        okhttp3.Call localVarCall = addConfigurationToSetValidateBeforeCall(type, scope, code, createConfigurationItem, userId, null);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] AddConfigurationToSet: Add a configuration item to an existing set (asynchronously)
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param createConfigurationItem The data to create a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addConfigurationToSetAsync(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, final ApiCallback<ConfigurationSet> _callback) throws ApiException {
        okhttp3.Call localVarCall = addConfigurationToSetValidateBeforeCall(type, scope, code, createConfigurationItem, userId, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createConfigurationSet
     * @param createConfigurationSet The data to create a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConfigurationSetCall(CreateConfigurationSet createConfigurationSet, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createConfigurationSet;

        // create path and map variables
        String localVarPath = "/api/sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConfigurationSetValidateBeforeCall(CreateConfigurationSet createConfigurationSet, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createConfigurationSet' is set
        if (createConfigurationSet == null) {
            throw new ApiException("Missing the required parameter 'createConfigurationSet' when calling createConfigurationSet(Async)");
        }
        

        okhttp3.Call localVarCall = createConfigurationSetCall(createConfigurationSet, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] CreateConfigurationSet: Create a configuration set
     * 
     * @param createConfigurationSet The data to create a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ConfigurationSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSet createConfigurationSet(CreateConfigurationSet createConfigurationSet, String userId) throws ApiException {
        ApiResponse<ConfigurationSet> localVarResp = createConfigurationSetWithHttpInfo(createConfigurationSet, userId);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] CreateConfigurationSet: Create a configuration set
     * 
     * @param createConfigurationSet The data to create a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;ConfigurationSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSet> createConfigurationSetWithHttpInfo(CreateConfigurationSet createConfigurationSet, String userId) throws ApiException {
        okhttp3.Call localVarCall = createConfigurationSetValidateBeforeCall(createConfigurationSet, userId, null);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] CreateConfigurationSet: Create a configuration set (asynchronously)
     * 
     * @param createConfigurationSet The data to create a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConfigurationSetAsync(CreateConfigurationSet createConfigurationSet, String userId, final ApiCallback<ConfigurationSet> _callback) throws ApiException {
        okhttp3.Call localVarCall = createConfigurationSetValidateBeforeCall(createConfigurationSet, userId, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccessToken
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessTokenCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/personal/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessTokenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = deleteAccessTokenCall(_callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] DeleteAccessToken: Delete any stored Personal Access Token for the current user
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccessToken() throws ApiException {
        deleteAccessTokenWithHttpInfo();
    }

    /**
     * [EXPERIMENTAL] DeleteAccessToken: Delete any stored Personal Access Token for the current user
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccessTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAccessTokenValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [EXPERIMENTAL] DeleteAccessToken: Delete any stored Personal Access Token for the current user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessTokenAsync(final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessTokenValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConfigurationItem
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConfigurationItemCall(String type, String scope, String code, String key, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}/items/{key}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConfigurationItemValidateBeforeCall(String type, String scope, String code, String key, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteConfigurationItem(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteConfigurationItem(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteConfigurationItem(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteConfigurationItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteConfigurationItemCall(type, scope, code, key, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConfigurationItem(String type, String scope, String code, String key, String userId) throws ApiException {
        deleteConfigurationItemWithHttpInfo(type, scope, code, key, userId);
    }

    /**
     * [EXPERIMENTAL] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConfigurationItemWithHttpInfo(String type, String scope, String code, String key, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationItemValidateBeforeCall(type, scope, code, key, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [EXPERIMENTAL] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set (asynchronously)
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConfigurationItemAsync(String type, String scope, String code, String key, String userId, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationItemValidateBeforeCall(type, scope, code, key, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConfigurationSet
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConfigurationSetCall(String type, String scope, String code, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConfigurationSetValidateBeforeCall(String type, String scope, String code, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteConfigurationSet(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteConfigurationSet(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteConfigurationSet(Async)");
        }
        

        okhttp3.Call localVarCall = deleteConfigurationSetCall(type, scope, code, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConfigurationSet(String type, String scope, String code, String userId) throws ApiException {
        deleteConfigurationSetWithHttpInfo(type, scope, code, userId);
    }

    /**
     * [EXPERIMENTAL] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConfigurationSetWithHttpInfo(String type, String scope, String code, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationSetValidateBeforeCall(type, scope, code, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [EXPERIMENTAL] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items (asynchronously)
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConfigurationSetAsync(String type, String scope, String code, String userId, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationSetValidateBeforeCall(type, scope, code, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateAccessToken
     * @param action action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAccessTokenCall(String action, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/personal/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateAccessTokenValidateBeforeCall(String action, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateAccessTokenCall(action, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token
     * 
     * @param action action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)
     * @return PersonalAccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PersonalAccessToken generateAccessToken(String action) throws ApiException {
        ApiResponse<PersonalAccessToken> localVarResp = generateAccessTokenWithHttpInfo(action);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token
     * 
     * @param action action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)
     * @return ApiResponse&lt;PersonalAccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalAccessToken> generateAccessTokenWithHttpInfo(String action) throws ApiException {
        okhttp3.Call localVarCall = generateAccessTokenValidateBeforeCall(action, null);
        Type localVarReturnType = new TypeToken<PersonalAccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token (asynchronously)
     * 
     * @param action action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateAccessTokenAsync(String action, final ApiCallback<PersonalAccessToken> _callback) throws ApiException {
        okhttp3.Call localVarCall = generateAccessTokenValidateBeforeCall(action, _callback);
        Type localVarReturnType = new TypeToken<PersonalAccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigurationItem
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationItemCall(String type, String scope, String code, String key, Boolean reveal, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}/items/{key}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reveal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reveal", reveal));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationItemValidateBeforeCall(String type, String scope, String code, String key, Boolean reveal, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getConfigurationItem(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getConfigurationItem(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getConfigurationItem(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getConfigurationItem(Async)");
        }
        

        okhttp3.Call localVarCall = getConfigurationItemCall(type, scope, code, key, reveal, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] GetConfigurationItem: Get the specific configuration item within an existing set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ConfigurationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationItem getConfigurationItem(String type, String scope, String code, String key, Boolean reveal, String userId) throws ApiException {
        ApiResponse<ConfigurationItem> localVarResp = getConfigurationItemWithHttpInfo(type, scope, code, key, reveal, userId);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] GetConfigurationItem: Get the specific configuration item within an existing set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;ConfigurationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationItem> getConfigurationItemWithHttpInfo(String type, String scope, String code, String key, Boolean reveal, String userId) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationItemValidateBeforeCall(type, scope, code, key, reveal, userId, null);
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] GetConfigurationItem: Get the specific configuration item within an existing set (asynchronously)
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationItemAsync(String type, String scope, String code, String key, Boolean reveal, String userId, final ApiCallback<ConfigurationItem> _callback) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationItemValidateBeforeCall(type, scope, code, key, reveal, userId, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigurationSet
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationSetCall(String type, String scope, String code, Boolean reveal, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reveal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reveal", reveal));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationSetValidateBeforeCall(String type, String scope, String code, Boolean reveal, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getConfigurationSet(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getConfigurationSet(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getConfigurationSet(Async)");
        }
        

        okhttp3.Call localVarCall = getConfigurationSetCall(type, scope, code, reveal, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ConfigurationSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSet getConfigurationSet(String type, String scope, String code, Boolean reveal, String userId) throws ApiException {
        ApiResponse<ConfigurationSet> localVarResp = getConfigurationSetWithHttpInfo(type, scope, code, reveal, userId);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;ConfigurationSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSet> getConfigurationSetWithHttpInfo(String type, String scope, String code, Boolean reveal, String userId) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationSetValidateBeforeCall(type, scope, code, reveal, userId, null);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed (asynchronously)
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationSetAsync(String type, String scope, String code, Boolean reveal, String userId, final ApiCallback<ConfigurationSet> _callback) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationSetValidateBeforeCall(type, scope, code, reveal, userId, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSystemConfigurationItems
     * @param code The code that identifies a system configuration set (required)
     * @param key The key that identifies a system configuration item (required)
     * @param reveal Whether to reveal the secrets (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemConfigurationItemsCall(String code, String key, Boolean reveal, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/system/{code}/items/{key}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reveal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reveal", reveal));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemConfigurationItemsValidateBeforeCall(String code, String key, Boolean reveal, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getSystemConfigurationItems(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getSystemConfigurationItems(Async)");
        }
        

        okhttp3.Call localVarCall = getSystemConfigurationItemsCall(code, key, reveal, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint
     * 
     * @param code The code that identifies a system configuration set (required)
     * @param key The key that identifies a system configuration item (required)
     * @param reveal Whether to reveal the secrets (optional)
     * @return ResourceListOfConfigurationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfConfigurationItem getSystemConfigurationItems(String code, String key, Boolean reveal) throws ApiException {
        ApiResponse<ResourceListOfConfigurationItem> localVarResp = getSystemConfigurationItemsWithHttpInfo(code, key, reveal);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint
     * 
     * @param code The code that identifies a system configuration set (required)
     * @param key The key that identifies a system configuration item (required)
     * @param reveal Whether to reveal the secrets (optional)
     * @return ApiResponse&lt;ResourceListOfConfigurationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfConfigurationItem> getSystemConfigurationItemsWithHttpInfo(String code, String key, Boolean reveal) throws ApiException {
        okhttp3.Call localVarCall = getSystemConfigurationItemsValidateBeforeCall(code, key, reveal, null);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint (asynchronously)
     * 
     * @param code The code that identifies a system configuration set (required)
     * @param key The key that identifies a system configuration item (required)
     * @param reveal Whether to reveal the secrets (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemConfigurationItemsAsync(String code, String key, Boolean reveal, final ApiCallback<ResourceListOfConfigurationItem> _callback) throws ApiException {
        okhttp3.Call localVarCall = getSystemConfigurationItemsValidateBeforeCall(code, key, reveal, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSystemConfigurationSets
     * @param code The code that identifies a system configuration set (required)
     * @param reveal Whether to reveal the secrets (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemConfigurationSetsCall(String code, Boolean reveal, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/system/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reveal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reveal", reveal));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemConfigurationSetsValidateBeforeCall(String code, Boolean reveal, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getSystemConfigurationSets(Async)");
        }
        

        okhttp3.Call localVarCall = getSystemConfigurationSetsCall(code, reveal, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint
     * 
     * @param code The code that identifies a system configuration set (required)
     * @param reveal Whether to reveal the secrets (optional)
     * @return ResourceListOfConfigurationSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfConfigurationSet getSystemConfigurationSets(String code, Boolean reveal) throws ApiException {
        ApiResponse<ResourceListOfConfigurationSet> localVarResp = getSystemConfigurationSetsWithHttpInfo(code, reveal);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint
     * 
     * @param code The code that identifies a system configuration set (required)
     * @param reveal Whether to reveal the secrets (optional)
     * @return ApiResponse&lt;ResourceListOfConfigurationSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfConfigurationSet> getSystemConfigurationSetsWithHttpInfo(String code, Boolean reveal) throws ApiException {
        okhttp3.Call localVarCall = getSystemConfigurationSetsValidateBeforeCall(code, reveal, null);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint (asynchronously)
     * 
     * @param code The code that identifies a system configuration set (required)
     * @param reveal Whether to reveal the secrets (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSystemConfigurationSetsAsync(String code, Boolean reveal, final ApiCallback<ResourceListOfConfigurationSet> _callback) throws ApiException {
        okhttp3.Call localVarCall = getSystemConfigurationSetsValidateBeforeCall(code, reveal, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConfigurationSets
     * @param type Whether the configuration set is Personal or Shared (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConfigurationSetsCall(String type, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConfigurationSetsValidateBeforeCall(String type, String userId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listConfigurationSetsCall(type, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)
     * 
     * @param type Whether the configuration set is Personal or Shared (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ResourceListOfConfigurationSetSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfConfigurationSetSummary listConfigurationSets(String type, String userId) throws ApiException {
        ApiResponse<ResourceListOfConfigurationSetSummary> localVarResp = listConfigurationSetsWithHttpInfo(type, userId);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)
     * 
     * @param type Whether the configuration set is Personal or Shared (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;ResourceListOfConfigurationSetSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfConfigurationSetSummary> listConfigurationSetsWithHttpInfo(String type, String userId) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationSetsValidateBeforeCall(type, userId, null);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSetSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available) (asynchronously)
     * 
     * @param type Whether the configuration set is Personal or Shared (optional)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConfigurationSetsAsync(String type, String userId, final ApiCallback<ResourceListOfConfigurationSetSummary> _callback) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationSetsValidateBeforeCall(type, userId, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSetSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConfigurationItem
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param updateConfigurationItem The data to update a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationItemCall(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateConfigurationItem;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}/items/{key}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationItemValidateBeforeCall(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateConfigurationItem(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateConfigurationItem(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateConfigurationItem(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateConfigurationItem(Async)");
        }
        
        // verify the required parameter 'updateConfigurationItem' is set
        if (updateConfigurationItem == null) {
            throw new ApiException("Missing the required parameter 'updateConfigurationItem' when calling updateConfigurationItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateConfigurationItemCall(type, scope, code, key, updateConfigurationItem, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param updateConfigurationItem The data to update a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ConfigurationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationItem updateConfigurationItem(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId) throws ApiException {
        ApiResponse<ConfigurationItem> localVarResp = updateConfigurationItemWithHttpInfo(type, scope, code, key, updateConfigurationItem, userId);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param updateConfigurationItem The data to update a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;ConfigurationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationItem> updateConfigurationItemWithHttpInfo(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationItemValidateBeforeCall(type, scope, code, key, updateConfigurationItem, userId, null);
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description (asynchronously)
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param updateConfigurationItem The data to update a configuration item (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationItemAsync(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, final ApiCallback<ConfigurationItem> _callback) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationItemValidateBeforeCall(type, scope, code, key, updateConfigurationItem, userId, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConfigurationSet
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param updateConfigurationSet The data to update a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationSetCall(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateConfigurationSet;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.1.275");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationSetValidateBeforeCall(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateConfigurationSet(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateConfigurationSet(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateConfigurationSet(Async)");
        }
        
        // verify the required parameter 'updateConfigurationSet' is set
        if (updateConfigurationSet == null) {
            throw new ApiException("Missing the required parameter 'updateConfigurationSet' when calling updateConfigurationSet(Async)");
        }
        

        okhttp3.Call localVarCall = updateConfigurationSetCall(type, scope, code, updateConfigurationSet, userId, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] UpdateConfigurationSet: Update the description of a configuration set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param updateConfigurationSet The data to update a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ConfigurationSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ConfigurationSet updateConfigurationSet(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId) throws ApiException {
        ApiResponse<ConfigurationSet> localVarResp = updateConfigurationSetWithHttpInfo(type, scope, code, updateConfigurationSet, userId);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] UpdateConfigurationSet: Update the description of a configuration set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param updateConfigurationSet The data to update a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @return ApiResponse&lt;ConfigurationSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigurationSet> updateConfigurationSetWithHttpInfo(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationSetValidateBeforeCall(type, scope, code, updateConfigurationSet, userId, null);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] UpdateConfigurationSet: Update the description of a configuration set (asynchronously)
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param updateConfigurationSet The data to update a configuration set (required)
     * @param userId Feature that allows Administrators to administer personal settings  (but never reveal the value of secrets) of a specific user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationSetAsync(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, final ApiCallback<ConfigurationSet> _callback) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationSetValidateBeforeCall(type, scope, code, updateConfigurationSet, userId, _callback);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
